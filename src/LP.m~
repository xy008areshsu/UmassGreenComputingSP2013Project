%% Green Computing Project: Energy Efficiency in Smart Homes
% This is the simple case

clear ; close all; clc

% x(1) = s, x(2) = d, x(3) = p

%% ==========================Initializations===============================

paramInitLP


%% ===========================separate bounds==============================

% lowerBounds(:, 1) = s, lowerBounds(:, 2) = d lowerBounds(:, 3) = p
lowerBounds = zeros(T, 3);

% upperBounds(:, 1) = s, upperBounds(:, 2) = d upperBounds(:, 3) = p
upperBounds = Inf(T, 3);

% s <= C / 4, contraints number 3
upperBounds(: , 1) = C / 4; 

% unroll into vectors: 1:24 = s, 25:48 = d, 49:72 = p
lowerBounds = lowerBounds(:);
upperBounds = upperBounds(:);


%% ====================linear inequality constraints======================

% T = 24 time intervals, linear inequality matrix and vector A*x <= b, 
% 2 * T = 48 inequality constraints, 
% 3 * T = 72 varibles: T s, T d, and T p, so A is 48*72, b is 48*1
A = zeros(2 * T, 3 * T); 

% -e*s + d <= 0 constraints 4; s - 1/e * d <= C constraints 5
b = zeros(2 * T, 1);

% -e * sum(s_t) + sum(d_t) <= 0;  constraints 4, first T constraints for 
% constaint 4 in the paper
for i = 1 : T
    for j = 1 : i
        A(i, j) = -e;      % -e * sum(s_t)
        A(i, T + j) = 1;   % sum(d_t) 
    end
    b(i) = 0;
end

clear i j;

% sum(s_t) - 1/e * sum(d_t) <= C; constraints 5, second T constraints for
% constraint 5 in the paper
for i = 25 : 2 * T
    for j = 1 : i - T
        A(i, j) = 1;              % sum(s_t)
        A(i, T + j) = -(1/e);     % -(1/e) * sum(d_t)
    end
    b(i) = C;
end

clear i j;


%% =========================linear equality constraints====================
Aeq = zeros(T, 3 * T);
beq = zeros(T, 1);

% There should be at least one constraint here, which is p_i + d_i = predicted
% power consumption, here we are using hard coded power, which should be
% changed to ML predicted power in the future
for i = 1 : T
    Aeq(i, T + i) = 1;
    Aeq(i, 2 * T + i) = 1;
    beq(i) = powerPredict(i);
end

clear i;
        

%% ========================objective function==============================

% objective function: cost m = (p + s - d) * c => m = c*x1 - c*x2 + c*x3
m = zeros(3 * T, 1); 

for i = 1 : 24
    m(i) = 
m(1) = c;
m(2) = -c;
m(3) = c;

%% =======================LP solver ======================================
[x cost] = linprog(m, A, b, Aeq, beq, lowerBounds, upperBounds);

